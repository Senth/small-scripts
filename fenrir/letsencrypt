#!/usr/bin/python3
from subprocess import run
from os import path
import argparse
import os


# if not os.geteuid() == 0:
#     sys.exit("Only root can run this script")

parser = argparse.ArgumentParser(
    description="Create a Letsencrypt apache vhost configuration for the specified domain"
)
parser.add_argument(
    "action",
    choices=["add", "update"],
    help="If we want to generate a new TLS certificate and update domain locations, or update them",
)
parser.add_argument(
    "domain_names",
    nargs="*",
    help="The domains to add or update the letsencrypt vhost for",
)
parser.add_argument(
    "--frontend",
    choices=["apache", "nginx", "proxy"],
    help="The frontend of the webapplication. If proxy is specified you also need to specify a --frontend-port.",
)
parser.add_argument(
    "--index",
    action="store_true",
    help="if the domain is indexable/browseable. Only applicable with the apache frontend",
)
parser.add_argument(
    "--frontend-port",
    help="Port used for the frontend in proxy.",
)
parser.add_argument(
    "--backend-port",
    help="Adds a backend with the specified port. The backend will be served at /api",
)

args = parser.parse_args()

if (args.frontend == "proxy") and not args.frontend_port:
    parser.error("frontend 'proxy' requires --frontend-port.")

# automatically add --git if we use --frontend-port
if args.frontend_port:
    args.git = True


def main():
    for domain_name in args.domain_names:
        # domain = Domain(domain_name)
        # domain.update()

        if args.action == "add":
            certbot = Certbot(domain_name=domain_name)
            certbot.add()

    # Reload configurations
    # Nginx.reload()
    # Apache.reload()


class Config:
    www_dir = "/var/www/"

    def __init__(self, domain_name: str, webroot: str) -> None:
        self.domain_name = domain_name
        self.webroot = webroot
        self._conf = ""

    def _update_confs(self) -> None:
        self._conf = self._conf.replace("{SERVER_NAME}", self.domain_name)
        self._conf = self._conf.replace("{WEBROOT}", self.webroot)

    def _write_confs(self, vhosts_dir: str) -> None:
        """Write configuration to file"""
        conf_file_path = path.join(vhosts_dir, self.domain_name + ".conf")
        with open(conf_file_path, "w") as file:
            file.write(self._conf)


class Nginx(Config):
    vhosts_dir = "/etc/nginx/sites-enabled/"
    template_base = path.join(vhosts_dir, "template_base")
    frontend = path.join(vhosts_dir, "template_frontend_")
    backend = path.join(vhosts_dir, "template_backend")

    def __init__(self, domain_name: str, webroot: str) -> None:
        super().__init__(domain_name, webroot)
        self._frontend_conf = ""
        self._backend_conf = ""

    def update(self) -> None:
        self._read_configs()
        self._update_confs()
        self._write_confs(Nginx.vhosts_dir)

    def _read_configs(self) -> None:
        """Read template configurations for this configuration"""
        # Base config
        with open(Nginx.template_base, "r") as file:
            self._conf = file.read()

        # Frontend
        if args.frontend:
            frontend = Nginx.frontend + args.frontend
            with open(frontend, "r") as file:
                self._frontend_conf = file.read()

        # Backend
        if args.backend_port:
            with open(Nginx.backend, "r") as file:
                self._backend_conf = file.read()

    def _update_confs(self) -> None:
        """Update the configurations (but don't write)"""
        # Frontend
        if args.frontend_port:
            self._frontend_conf = self._frontend_conf.replace("{FRONTEND_PORT}", args.frontend_port)
        self._conf = self._conf.replace("{FRONTEND}", self._frontend_conf)

        # Backend
        if args.backend_port:
            self._backend_conf = self._backend_conf.replace("{BACKEND_PORT}", args.backend_port)
        self._conf = self._conf.replace("{BACKEND}", self._backend_conf)

        # Update general settings
        super()._update_confs()

    @staticmethod
    def reload() -> None:
        run(["systemctl", "reload", "nginx.service"])


class Apache(Config):
    vhosts_dir = "/etc/apache2/vhosts.d/"
    default = path.join(vhosts_dir, "default_ssl_vhost")
    index = path.join(vhosts_dir, "default_ssl_index_dir")

    def __init__(self, domain_name: str, webroot: str) -> None:
        super().__init__(domain_name=domain_name, webroot=webroot)

    def update(self) -> None:
        self._read_confs()
        self._update_confs()
        self._write_confs(Nginx.vhosts_dir)

    def _read_confs(self) -> None:
        template_file_path = Apache.default

        if args.index:
            template_file_path = Apache.index
        with open(template_file_path, "r") as file:
            self._conf = file.read()

    @staticmethod
    def reload() -> None:
        if args.frontend == "apache":
            pass


#             run(["rc-service", "apache2", "reload"])


class Certbot:
    conf_dir = "/etc/letsencrypt/renewal/"
    webroot = "/var/www/letsencrypt"

    def __init__(self, domain_name: str) -> None:
        self.domain_name = domain_name

    def add(self) -> None:
        run(
            [
                "certbot",
                "certonly",
                "--webroot",
                "-w",
                Certbot.webroot,
                "-d",
                self.domain_name,
            ]
        )


class Domain:
    def __init__(self, name) -> None:
        self.name = name
        self._webroot = path.join(Config.www_dir, name)

    def update(self) -> None:
        """Update or add the domain if it doesn't exist"""

        # Only create a webroot dir if necessary
        if args.frontend != "proxy" or args.backend_port:
            self._create_webroot_dir()

        # Update confs
        self._update_confs()

    def _create_webroot_dir(self) -> None:
        os.makedirs(self._webroot, exist_ok=True)

    def _update_confs(self) -> None:
        nginx = Nginx(self.name, self._webroot)
        nginx.update()

        # Apache
        if args.frontend == "apache":
            apache = Apache(self.name, self._webroot)
            apache.update()


main()
