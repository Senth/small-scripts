#!/usr/bin/python3
from __future__ import annotations

import os
import re
import subprocess
import sys
from pathlib import Path
from typing import List, Optional


def main() -> None:
    extensions = create_extensions()
    extension = get_extension(extensions, sys.argv)

    # Run pre-extension
    if extension:
        extension.pre(sys.argv)

    # Run default/full command
    if not extension or extension.run_default:
        run_git(sys.argv)
    else:
        extension.run(sys.argv)

    # Run post-extension
    if extension:
        extension.post(sys.argv)


def create_extensions() -> List[Extension]:
    extensions: List[Extension] = [
        Checkout(),
        CheckoutFromMain(),
        CheckoutRemote(),
        Clone(),
        CommitAll(),
        CommitAllPush(),
        Drop(),
        Hook(),
        IgnoreTodo(),
        LatestCommit(),
        Main(),
        Merge(),
        PruneLocalBranches(),
        Push(),
        Rebase(),
        Release(),
        Worktree(),
    ]
    return extensions


def get_extension(extensions: List[Extension], cmd: List[str]) -> Optional[Extension]:
    for extension in extensions:
        if extension.should_run(cmd):
            return extension
    return None


def run_git(cmd: List[str], capture_output=False, cwd: Optional[str] = None) -> str:
    # As we will call our script git in the future, we have to call the original git command using the full path
    if sys.platform == "win32":
        cmd[0] = "git.exe"
    elif sys.platform == "linux":
        cmd[0] = "/usr/bin/git"
    elif sys.platform == "darwin":
        cmd[0] = (
            "/usr/bin/git"  # Might be a different path for you? I don't have OSX ;)
        )

    result = subprocess.run(cmd, capture_output=capture_output, cwd=cwd)
    if result:
        if capture_output:
            return result.stdout.decode("utf-8")
        elif result.returncode != 0:
            sys.exit(result.returncode)
    return ""


def get_current_branch() -> str:
    current_branch = run_git(["git", "branch", "--show-current"], capture_output=True)
    current_branch = current_branch.strip(" \t\n")
    return current_branch


def git_stash() -> bool:
    """Stashes the current changes if there are any"""
    status = run_git(["git", "status", "--porcelain"], capture_output=True)
    if status:
        run_git(["git", "stash"])
        return True
    return False


def get_user_confirmation(prompt: str, default: bool) -> bool:
    valid_responses = {"y": True, "n": False}
    default_response = "Y" if default else "N"
    prompt = f"{prompt} (y/n) [{default_response}]: "

    while True:
        user_input = input(prompt).strip().lower()
        if user_input == "":
            return default
        elif user_input in valid_responses:
            return valid_responses[user_input]
        else:
            print("Invalid input. Please enter 'Y' or 'N'.")


def find_first_non_option(cmd: List[str], start: int) -> int:
    for i in range(start, len(cmd)):
        if not cmd[i].startswith("-"):
            return i
    return -1


class Extension:
    def __init__(self, command: List[str], run_default: bool) -> None:
        self.command = command
        self.run_default = run_default

    def should_run(self, cmd: List[str]) -> bool:
        # Check if the command is long enough to contain our command
        if len(cmd) - 1 < len(self.command):
            return False

        # Check if the command matches our command
        for i in range(len(self.command)):
            if cmd[i + 1] != self.command[i]:
                return False

        return True

    def pre(self, cmd: List[str]) -> None:
        pass

    def run(self, cmd: List[str]) -> None:
        pass

    def post(self, cmd: List[str]) -> None:
        pass


class Checkout(Extension):
    def __init__(self) -> None:
        super().__init__(["checkout", "-b"], run_default=True)

    def pre(self, cmd: List[str]) -> None:
        run_git(["git", "pull"])


class CheckoutFromMain(Extension):
    def __init__(self) -> None:
        super().__init__(["checkout", "-m"], run_default=False)

    def pre(self, cmd: List[str]) -> None:
        run_git(["git", "checkout", "main"])
        run_git(["git", "pull"])
        run_git(["git", "checkout", "-b", cmd[3]])


class CheckoutRemote(Extension):
    """Checkout a branch, if it already exists locally delete it before checking out"""

    def __init__(self) -> None:
        super().__init__(["checkout", "--remote"], run_default=False)

    def pre(self, cmd: List[str]):
        if len(cmd) <= 3:
            print("Please specify a branch to checkout")
            return

        branch = cmd[3]

        # Check if the branch exists locally
        out = run_git(["git", "branch", "--list", branch], capture_output=True)
        if out:
            # Branch exists locally, delete it
            run_git(["git", "branch", "-D", branch])

        # Checkout the branch
        run_git(["git", "checkout", branch])


class Clone(Extension):
    """Makes sure that we have the correct user name and email set for the repository"""

    work_repo = r"github\.com[\/:]ingka-group-digital"
    repo_regex = re.compile(r"[\/:]([^\/]+)$")

    def __init__(self) -> None:
        super().__init__(["clone"], run_default=True)

    def post(self, cmd: List[str]) -> None:
        # Get the repository url from the command
        url, repo_name = self.find_repo_url_and_name(cmd)

        # If a personal repository, set the user name and email
        if os.getcwd().startswith("/home/senth/git/"):
            self.set_username_and_email(repo_name, url)

    def set_username_and_email(self, repo_name: str, url: str) -> None:
        if re.search(Clone.work_repo, url):
            run_git(["git", "config", "user.name", "Matteus Magnusson"], cwd=repo_name)
            run_git(
                ["git", "config", "user.email", "matteus.magnusson@ingka.com"],
                cwd=repo_name,
            )
            run_git(["git", "config", "core.autcrlf", "input"], cwd=repo_name)
        elif "COMPUTER" in os.environ and "work" in os.environ["COMPUTER"]:
            run_git(["git", "config", "user.name", "Senth"], cwd=repo_name)
            run_git(
                ["git", "config", "user.email", "senth.wallace@gmail.com"],
                cwd=repo_name,
            )
            run_git(["git", "config", "core.autcrlf", "input"], cwd=repo_name)

    def find_repo_url_and_name(self, cmd: List[str]) -> tuple[str, str]:
        url = ""
        name = ""
        for arg in cmd:
            if arg.startswith("http") or arg.endswith(".git"):
                url = arg
            # Name should always be after the url, if specified
            elif url != "":
                name = arg
                break

        if url == "":
            print(f"No repository url found for {cmd}")
            sys.exit(1)

        if name == "":
            match = Clone.repo_regex.search(url)
            if match:
                name = match.group(1).removesuffix(".git")

        return url, name


class CommitAll(Extension):
    def __init__(self) -> None:
        super().__init__(["ca"], run_default=False)

    def run(self, cmd: List[str]) -> None:
        # Add all files to staging
        run_git(["git", "add", "--all"])

        # Remove first arguments (including optional -m)
        cmdExt = cmd[2:]
        if len(cmdExt) > 0 and cmdExt[0] == "-m":
            cmdExt.pop(0)

        # Commit all files
        cmd = ["git", "commit", "-m"]
        cmd.extend(cmdExt)
        run_git(cmd)


class CommitAllPush(Extension):
    def __init__(self) -> None:
        super().__init__(["cap"], run_default=False)

    def run(self, cmd: List[str]) -> None:
        # Add all files to staging
        run_git(["git", "add", "--all"])

        # Remove first arguments (including optional -m)
        cmdExt = cmd[2:]
        if len(cmdExt) > 0 and cmdExt[0] == "-m":
            cmdExt.pop(0)

        # Commit all files
        cmd = ["git", "commit", "-m"]
        cmd.extend(cmdExt)
        run_git(cmd)

        # Push the changes
        cmd = ["git", "push"]
        run_git(cmd)


class Drop(Extension):
    """Drop all local changes"""

    def __init__(self) -> None:
        super().__init__(["drop"], run_default=False)

    def run(self, cmd: List[str]) -> None:
        run_git(["git", "reset", "--hard", "HEAD"])
        run_git(["git", "clean", "-fd"])


class Hook(Extension):
    """Only works in linux, OSX, and WSL

    Hooks need to have the following format:
    pre-commit-<name>

    Only one hook per type is allowed at the moment.
    """

    src_hook_dir = Path("/home/senth/.commands/git-hooks")
    git_hook_dir = Path(".git/hooks")

    def __init__(self) -> None:
        super().__init__(["hook"], run_default=False)

    def run(self, cmd: List[str]) -> None:
        hooks = self.get_hooks()

        if len(cmd) < 3:
            self.print_hooks(hooks)
            return

        hook_name = cmd[2]

        # Find hook
        found_hook = None
        for hook in hooks:
            if hook.name == hook_name:
                found_hook = hook
                break

        if not found_hook:
            print(f"Hook '{hook_name}' not found")
            self.print_hooks(hooks)
            return

        self.symlink_hook(found_hook)

    def print_hooks(self, hooks: List[HookInfo]) -> None:
        print("Available hooks:")
        for hook in hooks:
            print(f"  {hook.name}")

    def get_hooks(self) -> List[HookInfo]:
        hooks: List[HookInfo] = []
        for hook in Hook.src_hook_dir.glob("*"):
            if hook.is_dir():
                continue

            match = re.match(r"(\w+-\w+)-[\w-]+", hook.name)
            if match:
                hook_type = match.group(1)
                hooks.append(HookInfo(hook.name, hook_type, hook))

        return hooks

    def symlink_hook(self, hook: HookInfo) -> None:
        symlink_file = Hook.git_hook_dir / hook.type
        os.symlink(hook.path, symlink_file)


class HookInfo:
    def __init__(self, name: str, type: str, path: Path) -> None:
        self.name = name
        self.type = type
        self.path = path


class IgnoreTodo(Extension):
    """Ignores the TODO.md and CHANGELOG.md files locally in this repository
    by changing the .git/info/exclude file"""

    exclude_file = Path(".git/info/exclude")

    def __init__(self) -> None:
        super().__init__(["ignore", "todo"], run_default=False)

    def run(self, cmd: List[str]) -> None:
        with open(IgnoreTodo.exclude_file, "a") as f:
            f.write("TODO.md\n")
            f.write("CHANGELOG.md\n")


class LatestCommit(Extension):
    """Get the latest commit hash, display it and copy it to the clipboard"""

    def __init__(self) -> None:
        super().__init__(["latest", "commit"], run_default=False)

    def run(self, cmd: List[str]) -> None:
        # Get the latest commit hash
        out = run_git(["git", "rev-parse", "HEAD"], capture_output=True)
        commit_hash = out.strip()

        # Copy the commit hash to the clipboard
        if sys.platform == "win32":
            subprocess.run(["clip"], input=commit_hash)
        elif sys.platform == "linux":
            subprocess.run(
                ["xclip", "-selection", "clipboard"], input=commit_hash.encode("utf-8")
            )
        elif sys.platform == "darwin":
            subprocess.run(["pbcopy"], input=commit_hash)

        print(f"Latest commit hash: {commit_hash}")


class Main(Extension):
    """Checkout main branch and pull it"""

    def __init__(self) -> None:
        super().__init__(["main"], run_default=False)

    def run(self, cmd: List[str]) -> None:
        run_git(["git", "checkout", "main"])
        run_git(["git", "pull"])


class Merge(Extension):
    """Merge the current branch to another branch"""

    def __init__(self) -> None:
        super().__init__(["merge"], run_default=True)
        self.stashed = False

    def pre(self, cmd: List[str]) -> None:
        if len(cmd) <= 2:
            return

        target_branch = Rebase.find_target_branch(cmd)

        # No targets found, probably running the merge command without any merge
        if not target_branch:
            return

        current_branch = get_current_branch()
        self.stashed = git_stash()

        # Only update the target branch if it's main
        if target_branch == "main":
            run_git(["git", "checkout", target_branch])
            run_git(["git", "pull"])
            run_git(["git", "checkout", current_branch])

    def post(self, cmd: List[str]) -> None:
        if not self.stashed:
            return

        run_git(["git", "stash", "pop"])


class PruneLocalBranches(Extension):
    def __init__(self) -> None:
        super().__init__(["prune", "branches"], run_default=False)

    def run(self, cmd: List[str]) -> None:
        to_prune = self.get_local_branches_not_on_remote()

        for branch in to_prune:
            run_git(["git", "branch", "-D", branch])

    def get_local_branches_not_on_remote(self) -> List[str]:
        # Before fetching, remove any remote-tracking refeneces that no longer exist on the remote.
        run_git(["git", "fetch", "-p"], capture_output=True)

        # Get all local branches
        out = run_git(["git", "branch", "-vv"], capture_output=True)

        # Find all origins that are gone
        print(f"Raw:\n{out}")
        pattern = re.compile(
            r"  ([\w\d\-_\.]+)\s+[a-f0-9]{7,8}\s(?:(?!\[origin)|\[origin\/[\/\w\d\-_\.]+: gone)"
        )
        matches = re.findall(pattern, out)
        return matches


class Push(Extension):
    """Automatically sets updstream if not set"""

    def __init__(self) -> None:
        super().__init__(["push"], run_default=True)

    def pre(self, cmd: List[str]) -> None:
        out = run_git(["git", "status", "-b", "--porcelain=v2"], capture_output=True)
        removed_upstream = False

        # Upstream set, but incorrectly to another branch name
        if "upstream" in out:
            upstream_search = re.search(r"branch\.upstream\s+origin/(.*)\n", out)
            upstream = ""
            if upstream_search:
                upstream = upstream_search.group(1)
            current_branch_search = re.search(r"branch\.head\s+(.*)\n", out)
            current_branch = ""
            if current_branch_search:
                current_branch = current_branch_search.group(1)
            if upstream != current_branch:
                run_git(["git", "branch", "--unset-upstream"])
                removed_upstream = True

        # Upstream not set
        if removed_upstream or "upstream" not in out:
            print("Automatically setting upstream")
            run_git(["git", "push", "--set-upstream", "origin", "HEAD"])


class Rebase(Extension):
    """Automatically pulls before doing a rebase"""

    def __init__(self) -> None:
        super().__init__(["rebase"], run_default=True)
        self.stashed = False

    def pre(self, cmd: List[str]) -> None:
        if len(cmd) <= 2:
            return

        target_branch = Rebase.find_target_branch(cmd)

        # No targets found, continue with running only the rebase command
        if not target_branch:
            return

        current_branch = get_current_branch()
        self.stashed = git_stash()

        # Only update the target branch if it's main
        if target_branch == "main":
            run_git(["git", "checkout", target_branch])
            run_git(["git", "pull"])
            run_git(["git", "checkout", current_branch])

    def post(self, cmd: List[str]) -> None:
        if not self.stashed:
            return

        run_git(["git", "stash", "pop"])

    @staticmethod
    def find_target_branch(cmd: List[str]) -> Optional[str]:
        for i in range(2, len(cmd)):
            arg = cmd[i]
            if arg.startswith("-"):
                continue

            return arg

        # No target branch found
        # This means it's probably a rebase --continue or --abort command
        return None


class Release(Extension):
    """Finds the next tag version and creates a release branch from main"""

    def __init__(self) -> None:
        super().__init__(["release"], run_default=False)

    def pre(self, cmd: List[str]) -> None:
        if len(cmd) <= 2:
            print("Please specify a release type (major, minor, patch)")
            return

        # Get next version
        current_version = self.get_latest_version()
        try:
            next_version = self.get_next_version(current_version, cmd[2])
        except ValueError:
            print("Invalid release type, please specify (major, minor, patch)")
            return

        # Checkout main and make sure it's up to date
        run_git(["git", "checkout", "main"])
        run_git(["git", "pull"])

        # Create tag
        print("Create release tag")
        print(f"{current_version} -> {next_version}")

        # Prompt for confirmation
        should_continue = get_user_confirmation(
            f"Create release tag {next_version}?", True
        )
        if not should_continue:
            print("Script canceled.")
            sys.exit(1)

        # Tag and push to remote
        run_git(["git", "tag", str(next_version)])
        run_git(["git", "push", "--tags"])

    def get_latest_version(self) -> Version:
        # Get all tags
        out = run_git(["git", "tag"], capture_output=True)
        tags = out.split("\n")

        # Find highest version
        latest_version = Version("0.0.0")
        for tag in tags:
            try:
                version = Version(tag)
                if version > latest_version:
                    latest_version = version
            except ValueError:
                pass

        return latest_version

    def get_next_version(self, current_version: Version, release_type: str) -> Version:
        if release_type == "major":
            return current_version.next_major()
        elif release_type == "minor":
            return current_version.next_minor()
        elif release_type == "patch":
            return current_version.next_patch()
        else:
            raise ValueError("Invalid release type")


class Version:
    regexp = re.compile(r"(v?)(\d+)\.(\d+)\.(\d+)")

    def __init__(self, version: str) -> None:
        match = re.match(Version.regexp, version)
        if not match:
            raise ValueError(f"Invalid version: {version}")

        self.v = match.group(1)
        self.major = int(match.group(2))
        self.minor = int(match.group(3))
        self.patch = int(match.group(4))

    def next_major(self) -> Version:
        return Version(f"{self.v}{self.major + 1}.0.0")

    def next_minor(self) -> Version:
        return Version(f"{self.v}{self.major}.{self.minor + 1}.0")

    def next_patch(self) -> Version:
        return Version(f"{self.v}{self.major}.{self.minor}.{self.patch + 1}")

    def __str__(self) -> str:
        return f"{self.v}{self.major}.{self.minor}.{self.patch}"

    def __gt__(self, other: "Version") -> bool:
        return (self.major, self.minor, self.patch) > (
            other.major,
            other.minor,
            other.patch,
        )

    def __lt__(self, other: "Version") -> bool:
        return (self.major, self.minor, self.patch) < (
            other.major,
            other.minor,
            other.patch,
        )


class Worktree(Extension):
    """Automatically append ../${current_dir_name}-${worktree_name} when adding or removing a worktree"""

    def __init__(self) -> None:
        super().__init__(["worktree"], run_default=False)

    def run(self, cmd: List[str]) -> None:
        if len(cmd) <= 2:
            run_git(cmd)
            return

        command = cmd[2]
        if command != "add" and command != "remove":
            run_git(cmd)
            return

        worktree_index = find_first_non_option(cmd, 3)
        if worktree_index == -1:
            run_git(cmd)
            return

        worktree_name = cmd[worktree_index]

        # Only add the path if it's not already there
        if worktree_name.find("/") != -1:
            run_git(cmd)
            return

        current_dir = os.getcwd()
        current_dir_name = os.path.basename(current_dir)
        worktree_path = f"../{current_dir_name}-{worktree_name}"
        cmd[worktree_index] = worktree_path

        run_git(cmd)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(1)
