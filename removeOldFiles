#!/usr/bin/python3

import argparse
import sys
import time
import os
import re

# Args setup
parser = argparse.ArgumentParser()
parser.add_argument(
    "days", metavar="N", type=int, help="Remove all files older than N days."
)
parser.add_argument(
    "dir",
    metavar="DIR",
    help="The directory to search for old files (non-recursive by default).",
)
parser.add_argument(
    "-r",
    "--recursive",
    action="store_true",
    help="Search recursively through directories.",
)
parser.add_argument(
    "-p",
    "--pretend",
    action="store_true",
    help="Only pretend to remove the files, use -v to see which files would get deleted",
)
parser.add_argument(
    "-f", "--filter", help="Only remove files matching the specific filter"
)
parser.add_argument(
    "-v",
    "--verbose",
    action="store_true",
    help="Print out which files would get deleted",
)


# Parse args
try:
    args = parser.parse_args()
except:
    parser.print_help()
    sys.exit(0)

# Delete files
now = time.time()
delete_time = now - args.days * 86400


def log(message):
    if args.verbose:
        print(message)


def search_and_delete_in_dir(dir):
    for file in os.listdir(dir):
        file_path = os.path.join(dir, file)
        file_time = os.stat(file_path).st_mtime

        # File
        if os.path.isfile(file_path):
            # Filter
            if not args.filter or re.match(args.filter, file_path):
                # Delete
                if file_time < delete_time:
                    days_old = (str)((int)((now - file_time) / 86400))
                    log("Remove {} ({} days old)".format(file_path, days_old))
                    if not args.pretend:
                        os.remove(file_path)
                # Keep
                else:
                    days_old = (str)((int)((now - file_time) / 86400))
                    log(
                        "Keep {} (Days old: {}, Filetime: {}, Delete_time: {})".format(
                            file_path, days_old, file_time, delete_time
                        )
                    )
            # Keep
            else:
                log("Keep {}, not matching filter: {}".format(file_path, args.filter))
        # Recursive
        elif args.recursive and os.path.isdir(file_path):
            search_and_delete_in_dir(file_path)


# MAIN
search_and_delete_in_dir(args.dir)
log("Done")
