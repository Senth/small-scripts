#!/usr/bin/python3

import argparse
import os
import sys
import subprocess
import threading
import psutil

# Args setup
parser = argparse.ArgumentParser()
parser.add_argument("input", nargs="+", help="At least one flac file")
parser.add_argument(
    "-o",
    "--output",
    help="Output file as mp3, or a folder if multiple input files (flac) were used",
    default="",
)

replaceKeepGroup = parser.add_mutually_exclusive_group()
replaceKeepGroup.add_argument(
    "-y", "--replace", help="Overwrite existing files", action="store_true"
)
replaceKeepGroup.add_argument(
    "-n", "--keep", help="Keep existing files", action="store_true"
)


def error(message=""):
    if message:
        print(message + "\n")
    parser.print_help()
    sys.exit(0)


# Convert a FLAC file
def convert(inFile: str, outName: str):
    # Get basename
    if inFile.endswith(".flac"):
        basename = inFile[:-5]
    else:
        return

    # Output is current or another directory -> Add filename
    if not outName or os.path.isdir(outName):
        outFile = outName
        if outName and not outName.endswith("/"):
            outFile += "/"
        outFile += basename + ".mp3"
    else:
        outFile = outName

    print("Converting " + inFile + " -> " + outFile)

    callList = [
        "ffmpeg",
        "-i",
        inFile,
        "-ab",
        "320k",
        "-map_metadata",
        "0",
        "-id3v2_version",
        "3",
        outFile,
    ]

    # Add extra arguments
    # Replace all
    if args.replace:
        callList.insert(1, "-y")
    # Keep
    if args.keep:
        callList.insert(1, "-n")

    FNULL = open(os.devnull, "w")
    subprocess.call(callList, stdout=FNULL, stderr=subprocess.STDOUT)


# Parse
try:
    args = parser.parse_args()
except:
    error()

# Check validity of output if exists
if args.output:
    # INPUT several
    if len(args.input) > 1:
        # OUTPUT has to be a directory OR (doesn't exists AND not end in .mp3)
        if not os.path.isdir(args.output):
            # Error -> Is a file
            if os.path.exists(args.output) or args.output.endswith(".mp3"):
                error("OUTPUT needs to be a directory when using multiple INPUT files")
            # Create directory
            else:
                os.makedirs(args.output)
    # SINGLE INPUT
    else:
        # Check if the file doesn't exist
        if not os.path.exists(args.output):
            # Create dir if it's a dir
            if not args.output.endswith(".mp3"):
                os.makedirs(args.output)


# Iterate
if len(args.input) > 0:
    activeThreads = []
    cores = psutil.cpu_count()
    for name in args.input:
        thread = threading.Thread(target=convert, args=(name, args.output))

        if len(activeThreads) >= cores:
            activeThreads[0].join()
            activeThreads.pop(0)

        thread.start()
        activeThreads.append(thread)

    # Join the rest
    for thread in activeThreads:
        thread.join()
